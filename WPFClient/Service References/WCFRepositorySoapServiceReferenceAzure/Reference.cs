//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFClient.WCFRepositorySoapServiceReferenceAzure {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Destination", Namespace="http://schemas.datacontract.org/2004/07/WCFRepositorySoapService")]
    [System.SerializableAttribute()]
    public partial class Destination : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFRepositorySoapServiceReferenceAzure.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Count", ReplyAction="http://tempuri.org/IService1/CountResponse")]
        int Count();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Count", ReplyAction="http://tempuri.org/IService1/CountResponse")]
        System.Threading.Tasks.Task<int> CountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountFilenames", ReplyAction="http://tempuri.org/IService1/CountFilenamesResponse")]
        int CountFilenames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountFilenames", ReplyAction="http://tempuri.org/IService1/CountFilenamesResponse")]
        System.Threading.Tasks.Task<int> CountFilenamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        bool Add(string fileName, string hostName, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string fileName, string hostName, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Get", ReplyAction="http://tempuri.org/IService1/GetResponse")]
        WPFClient.WCFRepositorySoapServiceReferenceAzure.Destination[] Get(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Get", ReplyAction="http://tempuri.org/IService1/GetResponse")]
        System.Threading.Tasks.Task<WPFClient.WCFRepositorySoapServiceReferenceAzure.Destination[]> GetAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        bool Remove(string fileName, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        System.Threading.Tasks.Task<bool> RemoveAsync(string fileName, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAll", ReplyAction="http://tempuri.org/IService1/AddAllResponse")]
        int AddAll(string[] files, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAll", ReplyAction="http://tempuri.org/IService1/AddAllResponse")]
        System.Threading.Tasks.Task<int> AddAllAsync(string[] files, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveAll", ReplyAction="http://tempuri.org/IService1/RemoveAllResponse")]
        int RemoveAll(string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveAll", ReplyAction="http://tempuri.org/IService1/RemoveAllResponse")]
        System.Threading.Tasks.Task<int> RemoveAllAsync(string host, int port);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WPFClient.WCFRepositorySoapServiceReferenceAzure.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WPFClient.WCFRepositorySoapServiceReferenceAzure.IService1>, WPFClient.WCFRepositorySoapServiceReferenceAzure.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Count() {
            return base.Channel.Count();
        }
        
        public System.Threading.Tasks.Task<int> CountAsync() {
            return base.Channel.CountAsync();
        }
        
        public int CountFilenames() {
            return base.Channel.CountFilenames();
        }
        
        public System.Threading.Tasks.Task<int> CountFilenamesAsync() {
            return base.Channel.CountFilenamesAsync();
        }
        
        public bool Add(string fileName, string hostName, int port) {
            return base.Channel.Add(fileName, hostName, port);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string fileName, string hostName, int port) {
            return base.Channel.AddAsync(fileName, hostName, port);
        }
        
        public WPFClient.WCFRepositorySoapServiceReferenceAzure.Destination[] Get(string fileName) {
            return base.Channel.Get(fileName);
        }
        
        public System.Threading.Tasks.Task<WPFClient.WCFRepositorySoapServiceReferenceAzure.Destination[]> GetAsync(string fileName) {
            return base.Channel.GetAsync(fileName);
        }
        
        public bool Remove(string fileName, string host, int port) {
            return base.Channel.Remove(fileName, host, port);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAsync(string fileName, string host, int port) {
            return base.Channel.RemoveAsync(fileName, host, port);
        }
        
        public int AddAll(string[] files, string host, int port) {
            return base.Channel.AddAll(files, host, port);
        }
        
        public System.Threading.Tasks.Task<int> AddAllAsync(string[] files, string host, int port) {
            return base.Channel.AddAllAsync(files, host, port);
        }
        
        public int RemoveAll(string host, int port) {
            return base.Channel.RemoveAll(host, port);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAllAsync(string host, int port) {
            return base.Channel.RemoveAllAsync(host, port);
        }
    }
}
